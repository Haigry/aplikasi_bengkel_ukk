// Database Configuration
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum Role {
  ADMIN
  KARYAWAN
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

// User Management Models
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String?
  noTelp    String?
  alamat    String?   @db.Text
  NoKTP     String?   @unique
  role      Role      @default(CUSTOMER)
  
  // Relations
  karyawan   Karyawan?
  kendaraan  Kendaraan[]
  transaksi  Riwayat[]
  booking    Booking[]
  
  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}


model Karyawan {
  id        Int       @id @default(autoincrement())
  name      String
  position  String
  
  // Relations
  userId    Int?      @unique
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  transaksi Riwayat[]
  
  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}


// Vehicle Management
model Kendaraan {
  id        String    @id @map("noPolisi")
  merk      String
  tipe      String
  transmisi String
  tahun     Int
  CC        Int
  
  // Relations
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  transaksi Riwayat[]
}


// Service Management
model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  harga       Float
  
  // Relations
  transaksi   Riwayat[]
}


model Sparepart {
  id          Int       @id @default(autoincrement())
  name        String
  harga       Float
  stok        Int       @default(0)
  
  // Relations
  transaksi     Riwayat[]
  riwayatItems  RiwayatSparepart[]
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


// Booking and Transaction
model Booking {
  id        Int           @id @default(autoincrement())
  queue     Int
  date      DateTime
  message   String        @db.Text
  status    BookingStatus @default(PENDING)
  
  // Relations
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  
  // Timestamps
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Riwayat {
  id          Int       @id @default(autoincrement())
  totalHarga  Float     @default(0)
  quantity    Int       @default(1)
  harga       Float     @default(0)
  
  // Relations
  userId      Int
  karyawanId  Int
  kendaraanId String
  sparepartId Int?          // This can be removed if not needed
  serviceId   Int?
  
  user        User      @relation(fields: [userId], references: [id])
  karyawan    Karyawan  @relation(fields: [karyawanId], references: [id])
  kendaraan   Kendaraan @relation(fields: [kendaraanId], references: [id])
  sparepart   Sparepart? @relation(fields: [sparepartId], references: [id])  // Keep this for backward compatibility
  spareParts  RiwayatSparepart[]  // Add this new relation
  service     Service?   @relation(fields: [serviceId], references: [id])
  
  riwayatLaporan RiwayatLaporan[]
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Reporting
model Laporan {
  id              Int       @id @default(autoincrement())
  tanggal         DateTime
  periode         String    // 'HARIAN', 'MINGGUAN', 'BULANAN'
  omset           Float     @default(0)
  jumlahServis    Int       @default(0)
  jumlahSparepart Int       @default(0)
  totalTransaksi  Int       @default(0)
  
  // Relations
  riwayatLaporan  RiwayatLaporan[]
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model RiwayatLaporan {
  laporanId  Int
  riwayatId  Int
  
  // Relations
  laporan    Laporan @relation(fields: [laporanId], references: [id])
  riwayat    Riwayat @relation(fields: [riwayatId], references: [id])

  @@id([laporanId, riwayatId])
}

// Add new model for sparepart items in a transaction
model RiwayatSparepart {
  id          Int       @id @default(autoincrement())
  riwayatId   Int
  sparepartId Int
  quantity    Int       @default(1)
  harga       Float     // Price at time of purchase
  
  // Relations
  riwayat     Riwayat    @relation(fields: [riwayatId], references: [id])
  sparepart   Sparepart  @relation(fields: [sparepartId], references: [id])

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
